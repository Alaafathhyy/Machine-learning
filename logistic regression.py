# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15HF0HqVOPNnMK9MOhAffojmj6hNwoLBb
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

data=pd.read_csv("heart.csv")

df= data.sample(frac=1).reset_index(drop=True)

cols=['trestbps','chol','thalach','oldpeak']

X=df[cols]
Y = df['target']

X_normalized=(X-X.mean())/(X.std())

X=pd.DataFrame(X_normalized)

X.insert(0,'one',1)

X_train = X[:242].values
Y_train = Y[:242].values

X_test = X[242:].values
Y_test = Y[242:].values

c=np.matrix(np.array([0,0,0,0,0]))

def sigmoid(z): return 1 / (1 + np.exp(-z))

def compute_cost(x, y, weights):
   z=np.dot(x,weights.transpose())
   predict_1 = y * np.log(sigmoid(z))
   predict_0 = (1 - y) * np.log(1 -sigmoid(z))
   return -sum(predict_1 + predict_0) / len(x)

print("cost before optimization of training examples = ",compute_cost(X_train,Y_train,c))

print("cost before optimization of testing examples = ",compute_cost(X_test,Y_test,c))

def G_D(x,y):
  loss = []
  parameters =np.array([0,0,0,0,0])
  n=x.shape[0]
  n_epoch=1000
  alpha=0.01
  for i in range(n_epoch):
    h_x=sigmoid(np.dot(x,parameters))
    parameters = parameters - (alpha/n)*(np.dot(x.transpose(),h_x-y))
    loss.append(compute_cost(x, y, parameters)) 
  return parameters,loss

p,p2=G_D(X_train,Y_train)

print("cost function after optimizing of training examples ",compute_cost(X_train,Y_train,p))

print("cost function after optimizing of testing examples ",compute_cost(X_test,Y_test,p))

def predict(x):
  z = np.dot(x, p)
  pred= [1 if i > 0.5 else 0 for i in sigmoid(z)]
  return pred

def accuracy(x,y,k):
  pred=predict(x)
  m=pred-y
  n=np.count_nonzero(m==0)
  return (n*100)/len(x)

print("accuracy of training data",accuracy(X_train,Y_train,p))

print("accuracy of testing data",accuracy(X_test,Y_test,p))

plt.ylabel('Cost Function')
plt.xlabel('iteration')
plt.plot(p2 , c='red' , label = 'Cost Function')
plt.legend()
plt.show()

